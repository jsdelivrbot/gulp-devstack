{{#block "sprites"}}

@highdensity: ~"(-webkit-min-device-pixel-ratio: 1.5)",
              ~"(min--moz-device-pixel-ratio: 1.5)",
              ~"(-o-min-device-pixel-ratio: 3/2)",
              ~"(min-device-pixel-ratio: 1.5)";

{{#each sprites}}

@{{#clean}}{{name}}{{/clean}}-name: '{{name}}';
@{{#clean}}{{name}}{{/clean}}-x: {{px.x}};
@{{#clean}}{{name}}{{/clean}}-y: {{px.y}};
@{{#clean}}{{name}}{{/clean}}-offset_x: {{px.offset_x}};
@{{#clean}}{{name}}{{/clean}}-offset_y: {{px.offset_y}};
@{{#clean}}{{name}}{{/clean}}-width: {{px.width}};
@{{#clean}}{{name}}{{/clean}}-height: {{px.height}};
@{{#clean}}{{name}}{{/clean}}-total_width: {{px.total_width}};
@{{#clean}}{{name}}{{/clean}}-total_height: {{px.total_height}};
@{{#clean}}{{name}}{{/clean}}-image: '{{{escaped_image}}}';
@{{#clean}}{{name}}{{/clean}}: {{px.x}} {{px.y}} {{px.offset_x}} {{px.offset_y}} {{px.width}} {{px.height}} {{px.total_width}} {{px.total_height}} '{{{escaped_image}}}' '{{#clean}}{{name}}{{/clean}}';
.sprite-{{#clean}}{{name}}{{/clean}}() { .sprite(@{{#clean}}{{name}}{{/clean}}); }
.sprite-{{#clean}}{{name}}{{/clean}} { .sprite-{{#clean}}{{name}}{{/clean}}() }
{{#if pseudo}}
.sprite-{{#makepseudo}}{{#clean}}{{name}}{{/clean}}{{/makepseudo}} { .sprite-{{#clean}}{{name}}{{/clean}}(); }
{{/if}}
{{#if highdensity}}
.{{#clean}}{{#removeHighdensity}}{{name}}{{/removeHighdensity}}{{/clean}}() { @media @highdensity { .sprite-{{#clean}}{{name}}{{/clean}}(); background-size: 100%; width: {{px.width}} / 2px; height: {{px.height}} / 2px; } }
{{/if}}

{{/each}}
{{/block}}

{{#block "spritesheet"}}
@{{spritesheet.name}}-width: {{spritesheet.px.width}};
@{{spritesheet.name}}-height: {{spritesheet.px.height}};
@{{spritesheet.name}}-image: '{{{spritesheet.escaped_image}}}';
@{{spritesheet.name}}-sprites:{{#each sprites}} @{{#clean}}{{name}}{{/clean}}{{/each}};
@{{spritesheet.name}}: {{spritesheet.px.width}} {{spritesheet.px.height}} '{{{spritesheet.escaped_image}}}' @{{spritesheet.name}}-sprites;
{{/block}}

{{#block "sprite-functions"}}
{{#if options.functions}}
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  {{! DEV: We slice to trim off excess quotes on an escaped URL }}
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

.sprite {
  display: inline-block;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}
{{/if}}
{{/block}}

{{#block "spritesheet-functions-comment"}}
{{#if options.functions}}
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
{{/if}}
{{/block}}
{{#block "spritesheet-functions"}}
{{#if options.functions}}
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: extract(@sprite, 10);
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
{{/if}}
{{/block}}